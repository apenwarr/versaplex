<?xml version="1.0"?>
<project name="NUnit" default="build" basedir=".">

<!-- ***************************************************************** -->
<!-- **********Set Properties used by Various targets **************** -->
<!-- ***************************************************************** -->

  <!-- OS Platform in Use -->
  <property name="os.platform" value="other"/>
  <if test="${platform::is-win32()}">
    <property name="os.platform" value="win32"/>
  </if>
  <if test="${platform::is-unix()}">
    <property name="os.platform" value="linux"/>
  </if>

  <!-- NUnit executables and arguments -->
  <property name="nunit.gui.name" value="nunit.exe"/>
  <property name="nunit.gui.name.x86" value="nunit-x86.exe"/>
  <property name="nunit.console.name" value="nunit-console.exe"/>
  <property name="nunit.console.name.x86" value="nunit-console-x86.exe"/>
  <property name="nunit.project.name" value="NUnitTests.nunit"/>
  <property name="nunit.base.tests" value="nunit.framework.tests.dll nunit.core.tests.dll nunit.extensions.tests.dll nunit.util.tests.dll nunit.mocks.tests.dll nunit-console.tests.dll nunit.fixtures.tests.dll"/>
  <property name="nunit.gui.tests" value="nunit.uikit.tests.dll nunit-gui.tests.dll"/>
  <property name="nunit.options" value=""/>

  <!-- NCover executable and arguments -->
  <property name="ncover.console.name" value="NCover.Console.exe"/>
  <property name="ncover.options" 
    value="//a nunit.framework;nunit.core;nunit.extensions;nunit.util;nunit.console;nunit.uikit;nunit-gui-runner"/>

  <!-- Fit Executable and DLL-->
  <property name="fit.executable" value="runFile.exe" />
  <property name="fit.dll" value="fit.dll" />

  <!-- Project src dir is nant project base dir -->
  <property name="project.src.dir"
    value="${project::get-base-directory()}"/>

  <!-- Project base dir is the src dir's parent -->
  <property name="project.base.dir"
    value="${path::get-directory-name(project.src.dir)}"/>

  <!-- Other directories are derived from src and base -->
  <property name="project.build.dir" 
    value="${path::combine(project.base.dir,'build')}"/>
  <property name="project.package.dir" 
    value="${path::combine(project.base.dir,'package')}"/>
  <property name="project.doc.dir"
    value="${path::combine(project.base.dir,'doc')}"/>
  <property name="project.samples.dir"
    value="${path::combine(project.base.dir,'samples')}"/>
  <property name="project.tools.dir"
    value="${path::combine(project.base.dir,'tools')}"/>
  <property name="project.install.dir"
    value="${path::combine(project.src.dir, 'install')}"/>
  <property name="samples.bin.dir"
    value="${path::combine(project.samples.dir, 'bin')}"/>

  <!-- Individual Tool Directories -->
  <property name="wix.dir" 
    value="${path::combine(project.tools.dir,'WiX')}"/>
  <property name="wix.installed" 
    value="${file::exists(path::combine(wix.dir,'candle.exe'))}"/>
  <property name="ncover.dir" 
    value="${path::combine(project.tools.dir,'ncover')}"/>
  <property name="ncover.installed"
    value="${file::exists(path::combine(ncover.dir,ncover.console.name))}"/>
  <property name="fit.dir"
    value="${path::combine(project.tools.dir,'fit')}"/>
  <property name="fit.installed"
    value="${file::exists(path::combine(fit.dir,fit.dll))}"/>

  <!-- Visual Studio locations -->
  <if test="${platform::is-win32()}">
    <readregistry property="vs.2002.path" 
      key="Software\Microsoft\VisualStudio\7.0\InstallDir" 
      hive="LocalMachine" failonerror="false"/>
    <readregistry property="vs.2003.path" 
      key="Software\Microsoft\VisualStudio\7.1\InstallDir" 
      hive="LocalMachine" failonerror="false"/>
    <readregistry property="vs.2005.path" 
      key="Software\Microsoft\VisualStudio\8.0\InstallDir" 
      hive="LocalMachine" failonerror="false"/>
  </if>

  <!-- Root of the package file name -->
  <property name="package.name" 
    value="${project.name}-${package.version}${package.suffix}"/>

  <!-- Package directories -->
  <property name="package.working.dir" 
    value="${path::combine(project.package.dir,package.name)}"/>
  <property name="package.bin.dir" 
    value="${path::combine(package.working.dir,'bin')}"/>
  <property name="package.doc.dir" 
    value="${path::combine(package.working.dir,'doc')}"/>
  <property name="package.samples.dir" 
    value="${path::combine(package.working.dir,'samples')}"/>
  <property name="package.src.dir" 
    value="${path::combine(package.working.dir,'src')}"/>
  <property name="package.tools.dir"
    value="${path::combine(package.working.dir,'tools')}"/>
  <property name="package.fit.dir"
    value="${path::combine(package.working.dir,'fit')}"/>
  <property name="package.resource.dir"
    value="${path::combine(package.working.dir, 'resources')}"/>
  <property name="wix.work.dir"
    value="${path::combine(project.package.dir, 'wixobj')}"/>

  <!-- Default build configuration -->
  <property name="build.config" value="debug"/>
  <property name="build.defines" value=""/>

  <!-- Default runtime configuration -->
  <foreach item="String" delim="," 
      property="framework" in="${supported.frameworks}">
    <if test="${framework::sdk-exists( framework )}">
      <property name="installed.frameworks" value="${installed.frameworks},${framework}"
        if="${property::exists('installed.frameworks')}"/>
      <property name="installed.frameworks" value="${framework}"
        unless="${property::exists('installed.frameworks')}"/>
      <property name="default.runtime" value="${framework}"
        unless="${property::exists('default.runtime')}"/>
      <property name="default.net.runtime" value="${framework}"
        if="${string::starts-with(framework,'net')}"
        unless="${property::exists('default.net.runtime')}"/>
      <property name="default.mono.runtime" value="${framework}"
        if="${string::starts-with(framework,'mono')}"
        unless="${property::exists('default.mono.runtime')}"/>
    </if>
  </foreach>

  <call target="set-${default.runtime}-runtime-config" />

<!-- ***************************************************************** -->
<!-- *********      FileSets Used by Various Targets       *********** -->
<!-- ***************************************************************** -->

  <!-- Buildfiles for all NUnit components - in build order -->
  <fileset id="project.buildfiles">

    <!-- NUnit Base -->
    <include name="NUnitFramework/framework/nunit.framework.build" />
    <include name="NUnitCore/interfaces/nunit.core.interfaces.build" />
    <include name="NUnitCore/core/nunit.core.build" />
    <include name="NUnitExtensions/framework/nunit.framework.extensions.build" />
    <include name="NUnitExtensions/core/nunit.core.extensions.build" />
    <include name="NUnitMocks/mocks/nunit.mocks.build" />
    <include name="ClientUtilities/util/nunit.util.build" />

    <!-- Console Runner -->
    <include name="ConsoleRunner/nunit-console/nunit-console.build" />
    <include name="ConsoleRunner/nunit-console-exe/nunit-console.exe.build" />

    <!-- Gui Runner -->
    <include name="GuiComponents/UiKit/nunit.uikit.build" if="${build.gui}" />
    <include name="GuiRunner/nunit-gui/nunit-gui.build" if="${build.gui}" />
    <include name="GuiRunner/nunit-gui-exe/nunit-gui.exe.build" if="${build.gui}" />

    <!-- Test Utilities and Dummy Projects -->
    <include name="tests/mock-assembly/mock-assembly.build" />
    <include name="tests/nonamespace-assembly/nonamespace-assembly.build" />
    <include name="tests/notestfixtures-assembly/notestfixtures-assembly.build" />
    <include name="tests/test-assembly/test-assembly.build" />
    <include name="tests/test-utilities/test-utilities.build" />
    <include name="tests/timing-tests/timing-tests.build" />

    <!-- NUnit Base Tests -->
    <include name="NUnitFramework/tests/nunit.framework.tests.build" />
    <include name="NUnitCore/tests/nunit.core.tests.build" />
    <include name="NUnitExtensions/tests/nunit.extensions.tests.build" />
    <include name="NUnitMocks/tests/nunit.mocks.tests.build" />
    <include name="ClientUtilities/tests/nunit.util.tests.build" />

    <!-- Console Runner Tests -->
    <include name="ConsoleRunner/tests/nunit-console.tests.build" />

    <!-- GUI Tests -->
    <include name="GuiComponents/tests/nunit.uikit.tests.build" if="${build.gui}" />
    <include name="GuiRunner/tests/nunit-gui.tests.build" if="${build.gui}" />

    <!-- FIT Tests -->
    <include name="NUnitFixtures/fixtures/nunit.fixtures.build" />
    <include name="NUnitFixtures/tests/nunit.fixtures.tests.build" />
  </fileset>

  <!-- BuildFiles for TestServer, which is not yet part of NUnit -->
  <fileset id="testserver.buildfiles">
    <include name="NUnitTestServer/nunit-server/nunit-server.build" />
    <include name="NUnitTestServer/nunit-server-exe/nunit-server.exe.build" />
    <include name="NUnitTestServer/tests/nunit-server.tests.build" />
  </fileset>

  <!-- BuildFiles for Samples -->
  <fileset id="sample.buildfiles" basedir="../samples">

    <!-- CSharp Samples -->
    <include name="csharp/failures/cs-failures.build" />
    <include name="csharp/money/cs-money.build" />
    <include name="csharp/money-port/cs-money-port.build" />
    <include name="csharp/syntax/cs-syntax.build" />

    <!-- JSharp Samples -->
    <include name="jsharp/failures/jsharp-failures.build"
      if="${task::exists('vjc')}" />

    <!-- VB Samples -->
    <include name="vb/failures/vb-failures.build"
      if="${task::exists('vbc')}" />
    <include name="vb/money/vb-money.build"
      if="${task::exists('vbc')}" />
    <include name="vb/syntax/vb-syntax.build"
      if="${task::exists('vbc')}" />

    <!-- Managed C++ Samples -->
    <include name="cpp/managed/failures/cpp-managed-failures.build"
      if="${property::exists('vs.2003.path')}" />

    <!-- C++/CLI Samples -->
    <include name="cpp/cpp-cli/failures/cpp-cli-failures.build"
      if="${property::exists('vs.2005.path')}" />
    <include name="cpp/cpp-cli/syntax/cpp-cli-syntax.build"
      if="${property::exists('vs.2005.path')}" />

    <!-- Extensibility Samples -->
    <include name="Extensibility/Core/Minimal/Minimal.build" />
    <include name="Extensibility/Core/SampleFixtureExtension/SampleFixtureExtension.build" />
    <include name="Extensibility/Core/SampleSuiteExtension/SampleSuiteExtension.build" />
    <include name="Extensibility/Core/MaxTimeDecorator/MaxTimeDecorator.build" />
  </fileset>

  <!-- Files to be copied to source directories -->
  <fileset id="source-files" >
        <include name="**/*.sln" />
        <include name="**/*.csproj" />
        <include name="**/*.config" />
        <include name="**/*.build" />
        <include name="**/*.cs" />
        <include name="**/*.xsd" />
        <include name="**/*.xslt" />
        <include name="**/*.resx" />
        <include name="**/*.jpg" />
        <include name="**/*.gif" />
        <include name="**/*.ico" />
        <include name="**/*.txt" />
        <include name="**/resources/*" />

        <exclude name="**/CVS/**" />
        <exclude name="**/bin/**" />
        <exclude name="**/obj/**" />
        <exclude name="**/Debug/**" />
        <exclude name="**/Release/**" />
  </fileset>

<!-- ***************************************************************** -->
<!-- ********* Targets for setting the build configuration *********** -->
<!-- ***************************************************************** -->

  <target name="set-build-config">
    <call target="set-${build.config}-build-config"/>
  </target>

  <target name="set-debug-build-config">
    <property name="build.config" value="debug"/>
    <property name="build.debug" value="true"/>
    <property name="build.defines" value="DEBUG,TRACE,${runtime.defines}"
        dynamic="true"/>
    <property name="zip.build.suffix" value="-dbg"/>
    <property name="msi.build.suffix" value="-dbg"/>
  </target>
	
  <target name="set-release-build-config">
    <property name="build.config" value="release"/>
    <property name="build.debug" value="false"/>
    <property name="build.defines" value="TRACE,${runtime.defines}"
	dynamic="true"/>
    <property name="zip.build.suffix" value=""/>
    <property name="msi.build.suffix" value=""/>
  </target>

<!-- ***************************************************************** -->
<!-- ***    Targets for setting the runtime configuration          *** -->
<!-- ***************************************************************** -->

  <target name="set-runtime-config">   
    <call target="set-${runtime.config}-runtime-config"/>
  </target>
  
  <target name="set-default-dot-net-runtime-config">
    <fail unless="${property::exists( 'default.net.runtime' )}"
      message="No versions of the .NET SDK were found"/>

    <call target="set-${default.net.runtime}-runtime-config" />
  </target>

  <target name="set-default-mono-runtime-config">
    <fail unless="${property::exists( 'default.mono.runtime' )}"
      message="No versions of the Mono runtime were found"/>

    <call target="set-${default.mono.runtime}-runtime-config" />
  </target>

  <target name="set-net-1.0-runtime-config">
    <fail unless="${framework::sdk-exists( 'net-1.0' )}"
      message="The .NET 1.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="net"/>
    <property name="runtime.version" value="1.0"/>
    <property name="runtime.config" value="net-1.0"/>
    <property name="runtime.defines" value="NET,NET_1_0"/>
    <property name="build.mono" value="false"/>
    <property name="build.win32" value="true"/>
    <property name="build.gui" value="false"/>
    <property name="build.x86" value="false"/>
    <property name="nant.settings.currentframework" 
      value="net-1.0"/>
    <property name="zip.runtime.suffix" value="-net-1.0"/>
    <property name="msi.runtime.suffix" value="-net-1.0"/>
    <property name="supported.test.platforms" 
      value="net-1.0,net-1.1,net-2.0,mono-1.0,mono-2.0"/>
    <call target="set-test-platforms"/>
  </target>
	
  <target name="set-net-1.1-runtime-config">
    <property name="runtime.platform" value="net"/>
    <fail unless="${framework::sdk-exists( 'net-1.1' )}"
      message="The .NET 1.1 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="net"/>
    <property name="runtime.version" value="1.1"/>
    <property name="runtime.config" value="net-1.1"/>
    <property name="runtime.defines" value="NET,NET_1_1"/>
    <property name="build.mono" value="false"/>
    <property name="build.win32" value="true"/>
    <property name="build.gui" value="true"/>
    <property name="build.x86" value="false"/>
    <property name="nant.settings.currentframework" 
      value="net-1.1"/>
    <property name="zip.runtime.suffix" value="-net-1.1"/>
    <property name="msi.runtime.suffix" value="-net-1.1"/>
    <property name="supported.test.platforms"
      value="net-1.0,net-1.1,net-2.0,mono-1.0,mono-2.0"/>
    <call target="set-test-platforms"/>
  </target>
	
  <target name="set-net-2.0-runtime-config">
    <fail unless="${framework::sdk-exists( 'net-2.0' )}"
      message="The .NET 2.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="net"/>
    <property name="runtime.version" value="2.0"/>
    <property name="runtime.config" value="net-2.0"/>
    <property name="runtime.defines" value="NET,NET_2_0"/>
    <property name="build.mono" value="false"/>
    <property name="build.win32" value="true"/>
    <property name="build.gui" value="true"/>
    <property name="build.x86" value="true"/>
    <property name="nant.settings.currentframework" 
      value="net-2.0"/>
    <property name="zip.runtime.suffix" value="-net-2.0"/>
    <property name="msi.runtime.suffix" value="-net-2.0"/>
    <property name="supported.test.platforms" value="net-2.0,mono-2.0"/>
    <call target="set-test-platforms"/>
  </target>
	
  <target name="set-mono-1.0-runtime-config">
    <fail unless="${framework::sdk-exists( 'mono-1.0' )}"
      message="The Mono 1.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="mono"/>
    <property name="runtime.version" value="1.0"/>
    <property name="runtime.config" value="mono-1.0"/>
    <property name="runtime.defines" value="MONO,MONO_1_0"/>
    <property name="build.mono" value="true"/>
    <property name="build.win32" value="false"/>
    <property name="build.gui" value="true"/>
    <property name="build.x86" value="false"/>
    <property name="nant.settings.currentframework" 
      value="mono-1.0"/>
    <property name="zip.runtime.suffix" value="-mono-1.0"/>
    <property name="msi.runtime.suffix" value="-mono-1.0"/>
    <property name="supported.test.platforms"
      value="mono-1.0,mono-2.0,net-1.0,net-1.1,net-2.0"/>
    <call target="set-test-platforms"/>
  </target>

  <target name="set-mono-2.0-runtime-config">
    <fail unless="${framework::sdk-exists( 'mono-2.0' )}"
      message="The Mono 2.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="mono"/>
    <property name="runtime.version" value="2.0"/>
    <property name="runtime.config" value="mono-2.0"/>
    <property name="runtime.defines" value="MONO,MONO_2_0"/>
    <property name="build.mono" value="true"/>
    <property name="build.win32" value="false"/>
    <property name="build.gui" value="true"/>
    <property name="build.x86" value="true"/>
    <property name="nant.settings.currentframework" 
      value="mono-2.0"/>
    <property name="zip.runtime.suffix" value="-mono-2.0"/>
    <property name="msi.runtime.suffix" value="-mono-2.0"/>
    <property name="supported.test.platforms" value="mono-2.0,net-2.0"/>
    <call target="set-test-platforms"/>
  </target>

  <target name="set-test-platforms">

    <property name="test.platforms" value=""/>

    <foreach item="String" delim=","
        property="framework" in="${supported.test.platforms}">

      <if test="${framework::exists( framework )}">
        <property name="test.platforms" value="${test.platforms},${framework}"
          unless="${test.platforms==''}"/>
        <property name="test.platforms" value="${framework}"
          if="${test.platforms==''}"/>
      </if>

    </foreach>
    
  </target>

<!-- ***************************************************************** -->
<!-- **************** Internally used targets ************************ -->
<!-- ***************************************************************** -->

  <!-- Set up the build directory -->
  <target name="set-build-dir"
    depends="set-build-config,set-runtime-config">
    <property name="os.platform.dir"
      value="${path::combine(project.build.dir,os.platform)}"/>
    <property name="runtime.platform.dir"
      value="${path::combine(os.platform.dir,runtime.platform)}"/>
    <property name="runtime.version.dir"
      value="${path::combine(runtime.platform.dir,runtime.version)}"/>
    <property name="current.build.dir" 
      value="${path::combine(runtime.version.dir,build.config)}"/>
  </target>
  
  <target name="make-build-dir" depends="set-build-dir">
    <mkdir dir="${current.build.dir}"
      unless="${directory::exists(current.build.dir)}"/>
  </target>

  <!-- Setup the package configuration info -->
  <target name="set-package-config"
    depends="set-build-config,set-runtime-config">
    <property name="zip.file.name" 
      value="${package.name}${zip.runtime.suffix}${zip.build.suffix}.zip"/>
    <property name="msi.file.name"
      value="${package.name}${msi.runtime.suffix}${msi.build.suffix}.msi"/>
    <property name="zipped.src.file.name"
      value="${package.name}-src.zip"/>
    <property name="zipped.doc.file.name"
      value="${package.name}-doc.zip"/>
    <property name="zipped.resource.file.name"
      value="${package.name}-resources.zip"/>
  </target>

  <target name="build-install-image" depends="clean-package-dir">

    <call target="copy-bins" />
    <call target="copy-docs" />
    <call target="copy-samples" />

    <copy file="../license.txt" todir="${package.working.dir}" />
    <copy file="../tools/fit/license.txt"
          tofile="${package.working.dir}/fit-license.txt" />
    <copy file="GuiRunner/nunit-gui/Logo.ico" todir="${package.working.dir}" />
    <copy file="NUnitFitTests.html" todir="${package.bin.dir}" />

  </target>

  <target name="create-zip" description="Create zip from existing image">
    <!-- Create the zip file -->
    <zip zipfile="${project.package.dir}/${zip.file.name}" ziplevel="9">
      <fileset basedir="${package.working.dir}">
        <include name="**"/>
      </fileset>
    </zip>
  </target>

  <target name="create-msi" description="Create msi from existing install image">
  
    <fail message="MSI can only be built on the Win32 platform" unless="${platform::is-win32()}"/>
    <fail message="MSI can only be built for a Win32 runtime" unless="${build.win32}"/>
    <fail message="MSI can not be built - WiX is not installed" unless="${wix.installed}"/>

    <property name="wix.work.dir"
      value="${package.working.dir}"/>

    <candle out="${wix.work.dir}/" exedir="${wix.dir}">
      <defines>
        <define name="ProductVersion" value="${package.version}" />
        <define name="NominalVersion" value="${nominal.version}" />
        <define name="RuntimeVersion" value="${runtime.version}" />
      </defines>
      <sources basedir="${project.install.dir}">
        <include name="bin.wxs" />
        <include name="nunit-gui.wxs" />
        <include name="doc.wxs" />
        <include name="tests.wxs" />
        <include name="samples.wxs" />
        <include name="NUnit.wxs" />
      </sources>
    </candle>

    <light exedir="${wix.dir}"
      out="${project.package.dir}/${msi.file.name}" 
      locfile="${wix.dir}/WixUI_en-us.wxl">
      <sources>
        <include name="${wix.work.dir}/NUnit.wixobj" />
        <include name="${wix.work.dir}/bin.wixobj" />
        <include name="${wix.work.dir}/nunit-gui.wixobj" />
        <include name="${wix.work.dir}/doc.wixobj" />
        <include name="${wix.work.dir}/samples.wixobj" />
        <include name="${wix.work.dir}/tests.wixobj" />
        <include name="${wix.dir}/wixui.wixlib" />
      </sources>
    </light>

  </target>

  <target name="copy-bins" depends="build">
    <mkdir dir="${package.bin.dir}"/>
    <copy todir="${package.bin.dir}">
      <fileset basedir="${current.build.dir}">
        <include name="*"/>
        <exclude name="*.wixobj"/>
        <exclude name="nunit-server.*"/>
        <exclude name="nunit-test-server.*"/>
      </fileset>
    </copy>
  </target>
  
  <target name="copy-docs">
    <mkdir dir="${package.doc.dir}"/>
    <copy todir="${package.doc.dir}">
      <fileset basedir="${project.doc.dir}">
        <include name="*.html"/>
	<include name="nunit.css"/>
	<include name="files/*"/>
	<include name="img/*"/>
        <exclude name="img/thumbs.db"/>
      </fileset>
    </copy>
  </target>

  <target name="copy-samples">

    <mkdir dir="${package.samples.dir}"/>

    <!-- Copy files that are not part of an individual project -->
    <copy todir="${package.samples.dir}">
      <fileset basedir="${project.samples.dir}">
        <include name="ReadMe.txt" />
        <include name="csharp/CSharp.sln" />
        <include name="jsharp/jsharp.sln" />
        <include name="vb/vb-samples.sln" />
        <include name="cpp/managed/managed-cpp.sln" />
        <include name="cpp/cpp-cli/cpp-cli.sln" />
        <include name="Extensibility/Core/CoreExtensibility.sln" />
        <include name="Extensibility/Core/Install.bat" />
      </fileset>
    </copy>

    <!-- Copy each project's files -->
    <nant target="package">
      <buildfiles refid="sample.buildfiles" />
    </nant>

  </target>

  <target name="copy-src">
    <delete dir="${package.src.dir}" />
    <mkdir dir="${package.src.dir}"/>

    <!-- Copy top level src files -->
    <copy todir="${package.src.dir}">
      <fileset basedir=".">
        <include name="license.rtf"/>
        <include name="nunit.build"/>
        <include name="nunit.build.include"/>
        <include name="nunit.sln"/>
        <include name="nunit_VS2005.sln"/>
        <include name="nunit.snk"/>
        <include name="nunit20under21.config"/>
        <include name="nunit20under22.config"/>
        <include name="nunit21under22.config"/>
        <include name="NUnitBinTests.config"/>
        <include name="NUnitBinTests.nunit"/>
        <include name="NUnitDevTests.config"/>
        <include name="NUnitDevTests.nunit"/>
        <include name="NUnitFitTests.html"/>
        <include name="CommonAssemblyInfo.cs"/>
        <include name="clr.bat"/>
        <include name="install/bin.wxs" />
        <include name="install/nunit-gui.wxs" />
        <include name="install/doc.wxs" />
        <include name="install/tests.wxs" />
        <include name="install/samples.wxs" />
        <include name="install/NUnit.wxs"/>
      </fileset>
    </copy>

    <!-- Copy individual projects -->
    <nant target="package" inheritrefs="true">
      <buildfiles refid="project.buildfiles" />
    </nant>

    <nant target="package" inheritrefs="true">
      <buildfiles refid="testserver.buildfiles" />
    </nant>

  </target>

  <target name="copy-tools">

    <mkdir dir="${package.tools.dir}" />

    <copy todir="${package.tools.dir}">
      <fileset basedir="${project.tools.dir}">
        <include name="fit/fit.dll"/>
        <include name="fit/runFile.exe"/>
        <include name="fit/runFile.exe.config"/>
        <include name="fit/license.txt"/>
      </fileset>
    </copy>

  </target>

<!-- ***************************************************************** -->
<!-- ***           Dump configuration settings for debugging       *** -->
<!-- ***************************************************************** -->

  <target name="dump-settings" depends="set-build-dir,set-package-config">

    <echo>Project Directories</echo>
    <echo>  Base:      ${project.base.dir}</echo>
    <echo>   Doc:      ${project.doc.dir}</echo>
    <echo>   Samples:  ${project.samples.dir}</echo>
    <echo>   Source:   ${project.src.dir}</echo>
    <echo>    Install: ${project.install.dir}</echo>
    <echo>   Build:    ${project.build.dir}</echo>
    <echo>   Package:  ${project.package.dir}</echo>
    <echo>   Tools:    ${project.tools.dir}</echo>
    <echo if="${wix.installed}">    WiX:     ${wix.dir}</echo>
    <echo unless="${wix.installed}">    WiX:     Not Installed</echo>
    <echo if="${ncover.installed}">    nCover:  ${ncover.dir}</echo>
    <echo unless="${ncover.installed}">    nCover:  Not Installed</echo>
    <echo></echo>
    <echo>Runtime Versions</echo>
    <echo>  Supported: ${supported.frameworks}</echo>
    <echo>  Installed: ${installed.frameworks}</echo>
    <echo>  Default:   ${default.runtime}</echo>
    <echo>    .Net:    ${default.net.runtime}</echo>
    <echo>    Mono:    ${default.mono.runtime}</echo>
    <echo></echo>
    <echo>Current Build Settings</echo>
    <echo>  Config:    ${build.config}</echo>
    <echo>  Runtime:   ${runtime.config}</echo>
    <echo>  Build Dir: ${current.build.dir}</echo>
    <echo>  Defines:   ${build.defines}</echo>
    <echo></echo>
    <echo>Test Platforms for Current Build</echo>
    <echo>  Supported: ${supported.test.platforms}</echo>
    <echo>  Installed: ${test.platforms}</echo>
    <echo></echo>
    <echo>Packaging</echo>
    <echo>  Name:      ${package.name}</echo>
    <echo>  Version:   ${package.version}</echo>
    <echo>  Zip file:  ${zip.file.name}</echo>
    <echo>  Msi file:  ${msi.file.name}</echo>
    <echo>  Source:    ${zipped.src.file.name}</echo>
    <echo>  Work Dir:  ${package.working.dir}</echo>
    <echo>   Bin:      ${package.bin.dir}</echo>
    <echo>   Doc:      ${package.doc.dir}</echo>
    <echo>   Samples:  ${package.samples.dir}</echo>
    <echo>   Source:   ${package.src.dir}</echo>
    <echo></echo>
    <echo>Current Framework and SDK Directories</echo>
    <echo>  ${framework::get-framework-directory(framework::get-target-framework())}</echo>
    <echo>  ${framework::get-sdk-directory(framework::get-target-framework())}</echo>
    <echo></echo>
    <echo>Visual Studio Directories</echo>
    <echo if="${property::exists('vs.2002.path')}">  ${vs.2002.path}</echo>
    <echo if="${property::exists('vs.2003.path')}">  ${vs.2003.path}</echo>
    <echo if="${property::exists('vs.2005.path')}">  ${vs.2005.path}</echo>
  </target>

</project>