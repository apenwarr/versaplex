<?xml version="1.0"?>
<project name="NUnit" default="help" basedir=".">

<!-- ***************************************************************** -->
<!-- This script has been tested using NAnt 0.85. At least             -->
<!-- one of the supported runtimes and sdk must be installed. In       -->
<!-- order to build the msi, WiX 2.0 and the WiX tasks for NAnt        -->
<!-- are required. To run the test coverage target, NCover is          -->
<!-- required.                                                         -->
<!--                                                                   -->
<!-- Limitations:                                                      -->
<!-- 1. Currently, the .NET 1.0 builds of the GUI runner cannot be     -->
<!--    run successfully. The .NET 1.1 builds may be run under         -->
<!--    .NET 1.0, however.                                             -->
<!--                                                                   -->
<!-- 2. Running the GUI under Mono is still experimental. We have      -->
<!--    tested under Mono 1.2.2 and seen some stability issues.        -->
<!--    Later releases of Mono may resolve these problems.             -->
<!-- ***************************************************************** -->

<!-- ***************************************************************** -->
<!-- ***                 Default Help Target                       *** -->
<!-- ***************************************************************** -->

<target name="help" description="Displays additional help information">
  <echo>
    This build file will build NUnitLite for any of the supported
    runtime frameworks which are actually installed. To add or
    support for a framework, edit this script

    Running on the current system, the following runtime frameworks
    are available for building and testing NUnit:
  </echo>

  <foreach item="String" delim="," 
      property="framework" in="${installed.frameworks}">
    <echo message="        ${string::pad-right(framework,15,' ')}${framework::get-description(framework)}"/>
  </foreach>

  <echo>
    The default build target is the ${default.runtime} debug config.
    Generic runtime targets use the following defaults:
        net           ${default.net.runtime}
        mono          ${default.mono.runtime}

    Note that targets that set the build configuration or runtime
    to be used must come before action targets. For example:

        nant net-1.1 release build
        nant build-all
        nant debug clean build

    Use   nant -projecthelp to see a full list of targets.
  </echo>
</target>

<!-- ***************************************************************** -->
<!-- ********* Common properties that control the build ************** -->
<!-- ***************************************************************** -->
 
  <!-- Project name - used as a prefix for packages -->
  <property name="project.name" value="NUnit"/>

  <!-- NUnit version for packaging -->
  <property name="package.version" value="2.4.3"/>

  <!-- Additional suffix used to distinguish files with the same version -->
  <property name="package.suffix" value=""/>

  <!-- Nominal version used for install directory and program
       files menu. Normally the same as the package version, 
       but may differ when we are in alpha or beta. -->
  <property name="nominal.version" value="2.4.3" />

  <!-- Frameworks supported by this build script. The first
         installed framework found is the default for builds. 
         The first .NET and Mono frameworks found are the
         respective net and mono defaults. -->
  <property name="supported.frameworks" 
    value="net-1.1,net-2.0,net-1.0,mono-1.0,mono-2.0"/>

  <!-- Framework versions for which packages are normally created -->
  <property name="standard.packages"
    value="net-1.1,net-2.0" />

  <!-- Additional internal properties are set in the include file -->
  <include buildfile="nunit.build.include"/>

<!-- ***************************************************************** -->
<!-- ***          Targets that set the build configuration         *** -->
<!-- ***     These must come before actions like build or test     *** -->
<!-- ***************************************************************** -->

  <target name="debug" description="Set config to debug for commands that follow">
    <call target="set-debug-build-config" />
  </target>

  <target name="release" description="Set config to release for commands that follow">
    <call target="set-release-build-config" />
  </target>

<!-- ***************************************************************** -->
<!-- ***         Targets that set the runtime configuration        *** -->
<!-- ***     These must come before actions like build or test     *** -->
<!-- ***************************************************************** -->

  <target name="net" 
      description="Set runtime to .NET 1.1 for commands that follow">
    <call target="set-default-dot-net-runtime-config"/>
  </target>

  <target name="net-1.0" 
    description="Set runtime to .NET 1.0 for commands that follow">
    <call target="set-net-1.0-runtime-config"/>
  </target>

  <target name="net-1.1" 
    description="Set runtime to .NET 1.1 for commands that follow"
    depends="set-net-1.1-runtime-config"/>
      
  <target name="net-2.0" 
    description="Set runtime to .NET 2.0 for commands that follow"
    depends="set-net-2.0-runtime-config"/>
      
  <target name="mono" description="Set runtime to Mono 1.0 for commands that follow">
    <call target="set-default-mono-runtime-config"/>
  </target>

  <target name="mono-1.0" description="Set runtime to Mono 1.0 for commands that follow">
    <call target="set-mono-1.0-runtime-config"/>
  </target>
  
  <target name="mono-2.0" description="Set runtime to Mono 2.0 for commands that follow">
    <call target="set-mono-2.0-runtime-config"/>
  </target>

<!-- ***************************************************************** -->
<!-- ***             Targets that clean directories                *** -->
<!-- ***************************************************************** -->

  <target name="clean" depends="set-build-dir"
      description="Removes the current build directory">
    <delete dir="${current.build.dir}" 
      if="${directory::exists( current.build.dir )}"/>
  </target>

  <target name="clean-all" description="Removes all build directories">
    <delete dir="${project.build.dir}" 
      if="${directory::exists( project.build.dir )}"/>
  </target>

  <target name="clean-package-dir" depends="set-package-config"
    description="Removes the current package working directory">
        <delete dir="${package.working.dir}" 
            if="${directory::exists( package.working.dir )}"/>
  </target>

  <target name="clean-source-dirs">
    <delete>
      <fileset>
        <include name="*/*/obj/**/*"/>
        <include name="*/*/bin/**/*"/>
      </fileset>
    </delete>
  </target>
.
<!-- ***************************************************************** -->
<!-- ***              Targets that perform builds                  *** -->
<!-- ***************************************************************** -->


  <target name="rebuild" depends="clean,build"
    description="Rebuild NUnit for default runtime version and config"/>

  <target name="build" depends="make-build-dir"
    description="Build NUnit for default runtime version and config">

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} build"/>
    <echo message="*"/>

    <!-- Copy key file to base directory, so build can access it -->
    <copy file="nunit.snk" todir="${project.build.dir}"/>

    <!-- Build NUnit components and tests -->
    <nant target="build">
      <buildfiles refid="project.buildfiles" />
    </nant>

    <!-- Copy files for running tests -->
    <copy todir="${current.build.dir}">
      <fileset>
        <include name="NUnitTests.nunit" />
        <include name="NUnitTests.config" />
        <include name="NUnitFitTests.html" />
        <include name="clr.bat" />
      </fileset>
    </copy>

  </target>

  <target name="rebuild-all" depends="clean-all,build-all"
      description="Rebuild current config for all available runtimes"/>

  <target name="build-all"
      description="Build current config for all available runtime">

    <foreach item="String" delim="," 
        property="framework" in="${installed.frameworks}">

      <call target="set-${framework}-runtime-config"/>
      <call target="build"/>

    </foreach>

  </target>

<!-- ***************************************************************** -->
<!-- ***   Test Server is experimental and not yet part of NUNit   *** -->
<!-- ***************************************************************** -->

  <target name="build-test-server" depends="make-build-dir">
    <nant target="build">
      <buildfiles refid="testserver.buildfiles" />
    </nant>
  </target>

<!-- ***************************************************************** -->
<!-- ***                 Targets for running tests                 *** -->
<!-- ***************************************************************** -->

  <target name="test" depends="build,run-test"
    description="Build and run tests for selected config and runtime"/>

  <target name="run-test"
      description="Run tests for selected config and runtime (no rebuild)">

    <echo message="*"/>
    <echo message="* Testing ${runtime.config} ${build.config} build"/>
    <echo message="*    Running under ${nant.settings.currentframework}"/>
    <echo message="*"/>

    <!-- We use exec rather than the nunit2 task because we are testing
         a new build of NUnit which is likely not to be included in the Nant build -->
    <!-- Mono currently has a SIGSEGV fault if we run in a single AppDomain -->

    <property name="nunit.test.assemblies" 
      value="${nunit.base.tests} ${nunit.gui.tests}" if="${build.gui}"/>
    <property name="nunit.test.assemblies" 
      value="${nunit.base.tests}" unless="${build.gui}"/>
    <property name="result.file" 
      value="TestResult-${nant.settings.currentframework}"/>
    <exec basedir="${current.build.dir}"
      workingdir="${current.build.dir}" 
	  program="${nunit.console.name}" 
      useruntimeengine="true"
	  commandline="NUnitTests.nunit ${nunit.options} /xml:${result.file}.xml" />

  </target>

  <target name="test-coverage" depends="build"
    description="Run tests for a build under NCover to get coverage results">

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} test coverage run"/>
    <echo message="*"/>

    <!-- We use exec rather than the nunit2 task because we are testing
         a new build of NUnit which is likely not to be included in the Nant build -->
    <exec basedir="${ncover.dir}"
          workingdir="${current.build.dir}" 
	  program="${ncover.console.name}" 
      useruntimeengine="true"
	  commandline="${nunit.console.name} ${nunit.project.name} ${nunit.options} ${ncover.options}"
	if="${build.win32}" />

    <!-- Mono currently has a SIGSEGV fault if we run in a single AppDomain -->
         a new build of NUnit which is likely not to be included in the Nant build -->
    <exec basedir="${ncover.dir}"
          workingdir="${current.build.dir}" 
	  program="${ncover.console.name}" 
          useruntimeengine="true"
	  commandline="${nunit.console.name} ${nunit.test.assemblies} ${nunit.options}"
	unless="${build.win32}" />

  </target>

  <target name="test-all"
      description="Build and test all runtimes for current config">

    <foreach item="String" delim="," 
        property="framework" in="${installed.frameworks}">

      <call target="set-${framework}-runtime-config"/>
      <call target="test" />

    </foreach>

  </target>

  <target name="test-each-runtime" depends="build"
      description="Run tests for the current build under each runtime">

    <foreach item="String" delim=","
        property="framework" in="${test.platforms}">

      <property name="nant.settings.currentframework" value="${framework}" />
      <call target="run-test" failonerror="false" />

    </foreach>

    <property name="nant.settings.currentframework" value="${runtime.config}" />

    <echo message="*" />
    <echo message="* Restored runtime to ${nant.settings.currentframework}" />
    <echo message="*" />

  </target>

  <target name="test-all-under-each"
      description="Build all runtimes and test the builds under each runtime.">

    <call target="set-release-build-config"/>

    <foreach item="String" delim="," 
        property="framework" in="${installed.frameworks}">

      <call target="set-${framework}-runtime-config"/>
      <call target="test-each-runtime" failonerror="false"/>

    </foreach>

  </target>

  <target name="nunit2-test" depends="build"
    description="Run tests for a build using the nunit2 task">

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} test run"/>
    <echo message="*"/>

    <nunit2>
      <formatter type="Plain"/>
      <test assemblyname="${current.build.dir}/nunit.framework.tests.dll"/>
    </nunit2>
  </target>

  <target name="timing-test" depends="build"
    description="Run timing tests (long)">

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} timing tests"/>
    <echo message="*"/>
    <echo message="* WARNING: Test may take some time to run"/>
    <echo message="*"/>

    <exec basedir="${current.build.dir}" 
      workingdir="${current.build.dir}" 
      program="${nunit.console.name}" 
      commandline="timing-tests.dll"/>

  </target>

  <target name="gui-test" depends="build"
    description="Run tests for a build using gui runner">

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} gui test run"/>
    <echo message="*"/>

    <exec basedir="${current.build.dir}" 
      workingdir="${current.build.dir}" 
      program="${nunit.gui.name}" 
      useruntimeengine="true"
      commandline="NUnitTests.nunit -run"/>

  </target>

  <target name="fit-tests" depends="build"
    description="Run Fit Acceptance tests on the build">

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} Fit Tests"/>
    <echo message="*"/>

    <exec basedir="${current.build.dir}" 
      workingdir="${current.build.dir}" 
      program="${fit.executable}" 
      useruntimeengine="true"
      commandline="NUnitFitTests.html TestResults.html ." />

  </target>


<!-- ***************************************************************** -->
<!-- *       Build the NUnit samples - not part of normal build    *** -->
<!-- ***************************************************************** -->

  <target name="clean-samples" description="Removes the samples build directory">
    <delete dir="${samples.bin.dir}" />
  </target>

  <target name="build-samples" depends="build"
     description="Build the NUnit samples">
    
    <mkdir dir="${samples.bin.dir}" unless="${directory::exists(samples.bin.dir)}" />

    <copy todir="${samples.bin.dir}"
      file="${path::combine(current.build.dir,'nunit.framework.dll')}" />
    <copy todir="${samples.bin.dir}"
      file="${path::combine(current.build.dir,'nunit.core.interfaces.dll')}" />
    <copy todir="${samples.bin.dir}"
      file="${path::combine(current.build.dir,'nunit.core.dll')}" />

    <nant target="build">
      <buildfiles refid="sample.buildfiles" />
    </nant>

  </target>

  <target name="rebuild-samples" depends="clean-samples,build-samples" 
      description="Rebuild the NUnit samples"/>

<!-- ***************************************************************** -->
<!-- ***         Targets for packaging the NUnit distribution      *** -->
<!-- ***************************************************************** -->

  <!-- Produce all the standard packages for a release -->
  <target name="package-release"
      description="Create standard packages for distribution">
      
    <call target="package-src"/>

    <call target="package-docs"/>

    <call target="set-release-build-config"/>

    <foreach item="String" delim="," 
        property="framework" in="${standard.packages}">

      <if test="${framework::sdk-exists( framework )}">
        <call target="set-${framework}-runtime-config"/>
        <call target="package"/>
      </if>

    </foreach>

  </target>

  <!-- Package the current build -->
  <target name="package" depends="build-install-image"
      description="Create both binary and msi packages for current build" >

    <call target="create-zip" />

    <if test="${platform::is-win32() and build.win32}" >
      <call target="create-msi" 
        if="${wix.installed}" />
      <echo message="MSI was not built - WiX is not installed"
        unless="${wix.installed}" />
    </if>

  </target>
  
  <!-- Package current config as a zip --> 
  <target name="package-zip" depends="build-install-image,create-zip"
    description="Create zip binary distribution package" />

  <target name="package-src" depends="clean-package-dir"
    description="Create full source package for developer use">

    <call target="copy-docs"/>
    <call target="copy-samples"/>
    <call target="copy-src"/>
    <call target="copy-tools" />

    <copy file="../license.txt" todir="${package.working.dir}" />

    <!-- Create the zip file -->
    <zip zipfile="${project.package.dir}/${zipped.src.file.name}" ziplevel="9">
      <fileset basedir="${package.working.dir}">
        <include name="**"/>
      </fileset>
    </zip>
  </target>

  <target name="package-docs" depends="clean-package-dir">

    <call target="copy-docs"/>

    <!-- Create the zip file -->
    <zip zipfile="${project.package.dir}/${zipped.doc.file.name}" ziplevel="9">
      <fileset basedir="${package.working.dir}">
        <include name="**"/>
      </fileset>
    </zip>
    
  </target>
  
  <target name="package-resources" depends="clean-package-dir">

    <copy todir="${package.resource.dir}/nunit-gui-runner">
      <fileset basedir="GuiRunner/nunit-gui/obj/Release">
        <include name="*.resources"/>
      </fileset>
    </copy>

    <copy todir="${package.resource.dir}/nunit.uikit">
      <fileset basedir="GuiComponents/UiKit/obj/Release">
        <include name="NUnit.UiKit.AddConfigurationDialog.resources"/>
        <include name="NUnit.UiKit.AssemblyPathDialog.resources"/>
        <include name="NUnit.UiKit.ConfigurationEditor.resources"/>
        <include name="NUnit.UiKit.RenameConfigurationDialog.resources"/>
        <include name="NUnit.UiKit.TestPropertiesDialog.resources"/>
        <include name="NUnit.UiKit.TestTree.resources"/>
      </fileset>
    </copy>

    <copy todir="${package.working.dir}">
      <fileset basedir="../tools/localization">
        <include name="*.*"/>
      </fileset>
    </copy>

    <if test="${property::exists('localize')}">
    <foreach property="culture" item="String" delim="," 
        in="${localize}">
    <foreach property="folder" item="Folder" 
        in="${package.working.dir}/resources">
      <property name="proj" 
        value="${path::get-file-name(folder)}"/>
      <property name="projdir" 
        value="${package.working.dir}/${culture}/${proj}"/>
    <foreach property="file" item="File" in="${folder}">
      <property name="filename"
        value="${path::get-file-name-without-extension(file)}"/>
      <copy file="${file}" 
        tofile="${projdir}/${filename}.${culture}.resources"/>"/>
    </foreach>
    </foreach>
    </foreach>   
    </if>

    <zip zipfile="${project.package.dir}/${zipped.resource.file.name}" ziplevel="9">
      <fileset basedir="${package.working.dir}">
        <include name="**"/>
      </fileset>
    </zip>

  </target>

  <target name="package-msi" depends="build-install-image,create-msi"
    description="Build msi file and deploy it to the package dir" />

<!-- ***************************************************************** -->
<!-- ***        Targets for installing the NUnit distribution      *** -->
<!-- ***************************************************************** -->

  <target name="install" depends="build-install-image"
      description="Install NUnit directly from the build">

  </target>

</project>
