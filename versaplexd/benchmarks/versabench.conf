#!/usr/bin/perl

################################################################################
# Variables... feel free to play around!
################################################################################

# Which tests do you want to run? (1 = run, 0 = don't run)
$test_mssql = 1;
$test_dbus = 1;
$test_vxodbc = 1;

# #tests to run for large and small queries
$num_large_row_tests = 20;
$num_small_row_tests = 500;
$num_small_insert_tests = 200;
$num_parallel_insert_tests = 100;

# Interfaces we use to talk to the corresponding data sources;
# to capture packets on, per-test
$sql_if = "eth0";
$dbus_if = "lo";
$vxodbc_if = $dbus_if;

# The name of the database on your SQL server that Versaplexd talks to, and
# which we'll now let MSSQL mangle.
$sqlserver = "pwc-averyp";
$dbname = "vxtest";

# Connection goodies per test
$sql_port = 1433;
$dbus_moniker = "tcp:host=127.0.0.1,port=5556";
$vxodbc_moniker = "gzip:tcp:127.0.0.1:5555";

# Username and password to connect to the database
$user = "sa";
$pw = "scs";

# Tcpdump behaviour governing
# Tcpdump doesn't get the packets out of the kernel right away, you have to
# give it a second or two to get on its feet.  This governs how many seconds
# you give it before killing it to analyze its packet stream.
$stupid_tcpdump_timeout = 2;
#1500 seems not to grab all the data.  Hmm.  We use a larger packet size for
#tcpdump captures.
$max_tcp_packet_size = 2000;
# Want to see messages like "tcpdump starting on interface blah blah?"  Me
# neither, but just in case, set this to 1 and you will.
$view_tcpdump_status = 0;

1;
